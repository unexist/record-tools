#!/bin/bash
set -e
eval "$($(dirname $0)/record-config)"

# Handle record type
record_type=$(echo $1 | tr '[:upper:]' '[:lower:]')
shift

## usage: record generate toc [-i INTRO] [-o OUTRO] [-p LINK_PREFIX] RECORD_TYPE
##
## Generates a table of contents in project format (Asciidoc or
## Markdown) to stdout.
##
## Options:
##
## -i INTRO  precede the table of contents with the given INTRO text.
## -o OUTRO  follow the table of contents with the given OUTRO text.
## -p LINK_PREFIX
##           prefix each decision file link with LINK_PREFIX.
##
## Both INTRO and OUTRO must be in project format.

args=$(getopt i:o:p: $*)
set -- $args

link_prefix=

for arg; do
    case "$arg" in

    -i)
        intro="$2"
        shift 2
        ;;
    -o)
        outro="$2"
        shift 2
        ;;
    -p)
        link_prefix="$2"
        shift 2
        ;;
    --)
        shift
        break
        ;;
    esac
done

record_type_up=$(echo $record_type | tr '[:lower:]' '[:upper:]')

cat <<EOF
$("$record_bin_dir/_record_text_header" "${record_type}" 1 "${record_type_up} records")

EOF

if [ ! -z "${intro}" ]; then
    # Check whether argument is a file?
    if [ -f "${intro}" ]; then
        cat "${intro}"
    else
        echo "${intro}"
    fi
    echo
fi

for f in $("$record_bin_dir/record-list" "${record_type}"); do
    title=$("$record_bin_dir/_record_title" "${record_type}" ${f})
    link=${link_prefix}$(basename ${f})

    echo "* $("$record_bin_dir/_record_text_link" "${record_type}" "${title}" "${link}")"
done

if [ ! -z "${outro}" ]; then
    echo
    # Check whether argument is a file?
    if [ -f "${outro}" ]; then
        cat "${outro}"
    else
        echo "${outro}"
    fi
fi
